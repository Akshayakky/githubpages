{"version":3,"sources":["cracker3.png","logo.svg","Order.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","grow","flexGrow","root","maxWidth","maxHeight","display","justify","item","media","width","height","margin","table","breakpoints","up","marginLeft","Order","classes","Card","className","CardActionArea","style","paddingTop","marginBottom","Grid","Typography","variant","color","align","CardMedia","image","img","title","CardContent","gutterBottom","component","TableContainer","Table","size","border","flex","TableHead","TableRow","TableCell","Button","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,sC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,+OCiBrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,KAAM,CACFD,SAAU,EACVE,SAAU,OACVC,UAAW,OACXC,QAAS,OACTC,QAAS,UAEbC,KAAM,CACFD,QAAS,UAEbE,MAAO,CACHC,MAAO,IACPC,OAAQ,IACRC,OAAQ,OACRN,QAAS,QACTF,SAAU,OACVC,UAAW,QAEfQ,MAAM,eACDb,EAAMc,YAAYC,GAAG,MAAQ,CAC1BC,WAAY,YAKT,SAASC,IACpB,IAAMC,EAAUpB,IAEhB,OACI,kBAACqB,EAAA,EAAD,CAAMC,UAAWF,EAAQf,MACrB,kBAACkB,EAAA,EAAD,CAAgBC,MAAO,CAACC,WAAY,GAAIC,aAAc,KAClD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAUC,MAAO,UAAhD,8CAIJ,kBAACC,EAAA,EAAD,CACIV,UAAWF,EAAQT,MACnBsB,MAAOC,IACPC,MAAM,0BAEV,kBAACC,EAAA,EAAD,KACI,kBAACR,EAAA,EAAD,CAAYS,cAAY,EAACR,QAAQ,KAAKS,UAAU,KAAKP,MAAO,UAA5D,aAGA,kBAACH,EAAA,EAAD,CAAYG,MAAO,UACf,kBAACH,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBQ,UAAU,KAA5D,oIAKA,kBAACC,EAAA,EAAD,KACI,kBAACX,EAAA,EAAD,CAAYG,MAAM,SAASP,MAAO,CAACZ,MAAO,KAAMU,UAAWF,EAAQL,OAC/D,kBAACyB,EAAA,EAAD,CAAOC,KAAK,QAAQC,OAAQ,EAAGlB,MAAO,CAACmB,KAAM,WACzC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWf,MAAM,UAAjB,YACA,kBAACe,EAAA,EAAD,CAAWf,MAAM,UAAjB,WACA,kBAACe,EAAA,EAAD,CAAWf,MAAM,UAAjB,aAGR,+BACA,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWf,MAAM,UAAjB,uBACA,kBAACe,EAAA,EAAD,CAAWf,MAAM,UAAjB,iBACA,kBAACe,EAAA,EAAD,CAAWf,MAAM,QAAjB,yDAQpB,6BACA,kBAACH,EAAA,EAAD,CAAYG,MAAO,UAEX,kBAACgB,EAAA,EAAD,CAAQvB,MAAO,CAACE,aAAc,GAAIsB,gBAAiB,UAAWlB,MAAO,SAC7DD,QAAQ,YAAYC,MAAM,YAAYW,KAAM,UADpD,yB,MCpFbQ,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAACH,EAAD,QCIc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70a14e52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cracker3.ccb5f5aa.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from \"@material-ui/core/Grid\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport img from \"./cracker3.png\";\n// import {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    grow: {\n        flexGrow: 1,\n    },\n    root: {\n        flexGrow: 1,\n        maxWidth: '100%',\n        maxHeight: '100%',\n        display: 'flex',\n        justify: 'center',\n    },\n    item: {\n        justify: 'centre'\n    },\n    media: {\n        width: 400,\n        height: 300,\n        margin: 'auto',\n        display: 'block',\n        maxWidth: '100%',\n        maxHeight: '100%',\n    },\n    table: {\n        [theme.breakpoints.up(\"md\")]: {\n            marginLeft: \"24%\"\n        }\n    }\n}));\n\nexport default function Order() {\n    const classes = useStyles();\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea style={{paddingTop: 20, marginBottom: 30}}>\n                <Grid>\n                    <Typography variant=\"h6\" color=\"inherit\" align={\"center\"}> Your Order Has Been Placed\n                        Successfully!\n                    </Typography>\n                </Grid>\n                <CardMedia\n                    className={classes.media}\n                    image={img}\n                    title=\"Contemplative Reptile\"\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\" align={\"center\"}>\n                        Hurray!!!\n                    </Typography>\n                    <Typography align={\"center\"}>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            Your order number is #2001539. We have emailed your order confirmation, and will\n                            send you an update when your order has shipped.\n                        </Typography>\n\n                        <TableContainer>\n                            <Typography align=\"center\" style={{width: 700}} className={classes.table}>\n                                <Table size=\"small\" border={1} style={{flex: \"center\"}}>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell align=\"center\">Email us</TableCell>\n                                            <TableCell align=\"center\">Contact</TableCell>\n                                            <TableCell align=\"center\">Address</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <tbody>\n                                    <TableRow>\n                                        <TableCell align=\"center\">abc@bridgelabz.com </TableCell>\n                                        <TableCell align=\"center\">+911234567890</TableCell>\n                                        <TableCell align=\"left\">Malhotra Complex,sector 23,RM marg,mumbai 40001\n                                        </TableCell>\n                                    </TableRow>\n                                    </tbody>\n                                </Table>\n                            </Typography>\n                        </TableContainer>\n                    </Typography>\n                    <br/>\n                    <Typography align={\"center\"}>\n                        {/*<Link to={\"/\"} style={{textDecoration: \"none\"}}>*/}\n                            <Button style={{marginBottom: 40, backgroundColor: \"#990033\", color: \"white\"}}\n                                    variant=\"contained\" color=\"secondary\" size={\"medium\"}>\n                                Continue Shopping\n                            </Button>\n                        {/*</Link>*/}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport Order from './Order'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Order/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}